!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r;r="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,r.eproto=t()}}(function(){return{infos:{},register:function(name,info){this.infos[name]=info},pack:function(tab){return msgpack.encode(tab)},unpack:function(buf){if(buf instanceof ArrayBuffer){buf=new Uint8Array(buf)}return msgpack.decode(buf)},encode:function(name,tab){var arr=this.copyArr(name,tab);return this.pack(arr)},decode:function(name,buf){var arr=this.unpack(buf);return this.copyTable(name,arr)},copyArr:function(name,tab){var info=this.infos[name];if(typeof info==="undefined"){throw new Error("can not find proto "+name)}var arr=new Array(info.length);for(var i=0,il=info.length;i<il;++i){var key=info[i];var value=tab[key[2]];var t=typeof value;if(t==="undefined"){arr[key[1]]=null;continue}switch(key[0]){case 2:{if(t==="boolean"){arr[key[1]]=value}else{throw new Error("type error boolean in proto "+name+" "+key[2]+" get "+t)}break}case 3:case 4:{if(t==="number"){arr[key[1]]=value}else{throw new Error("type error number in proto "+name+" "+key[2]+" get "+t)}break}case 5:{if(t==="string"){arr[key[1]]=value}else{throw new Error("type error string in proto "+name+" "+key[2]+" get "+t)}break}case 6:{if(t==="object"){if(typeof key[3]==="string"){var a=new Array(value.length);for(var j=0,vl=value.length;j<vl;++j){a[j]=this.copyArr(key[3],value[j])}arr[key[1]]=a}else{arr[key[1]]=value}}else{throw new Error("type error array in proto "+name+" "+key[2]+" get "+t)}break}case 7:{if(t==="object"){if(typeof key[4]==="string"){var a={};for(var j in value){a[j]=this.copyArr(key[4],value[j])}arr[key[1]]=a}else{arr[key[1]]=value}}else{throw new Error("type error map in proto "+name+" "+key[2]+" get "+t)}break}case 8:{if(t==="object"){arr[key[1]]=this.copyArr(key[3],value)}else{throw new Error("type error message in proto "+name+" "+key[2]+" get "+t)}break}default:{throw new Error("unknown type in proto "+name+" "+key[2]+" get "+key[0])}}}return arr},copyTable:function(name,arr){var info=this.infos[name];if(typeof info==="undefined"){throw new Error("can not find proto "+name)}var tab={};for(var i=0,il=info.length;i<il;++i){var key=info[i];var value=arr[key[1]];var t=typeof value;if(t==="undefined"||value===null){continue}switch(key[0]){case 2:{if(t==="boolean"){tab[key[2]]=value}else{throw new Error("type error boolean in proto "+name+" "+key[2]+" get "+t)}break}case 3:case 4:{if(t==="number"){tab[key[2]]=value}else{throw new Error("type error number in proto "+name+" "+key[2]+" get "+t)}break}case 5:{if(t==="string"){tab[key[2]]=value}else{throw new Error("type error string in proto "+name+" "+key[2]+" get "+t)}break}case 6:{if(t==="object"){var key3=key[3];if(typeof key3==="string"){var a=new Array(value.length);for(var j=0,vl=value.length;j<vl;++j){a[j]=this.copyTable(key3,value[j])}tab[key[2]]=a}else{tab[key[2]]=value}}else{throw new Error("type error array in proto "+name+" "+key[2]+" get "+t)}break}case 7:{if(t==="object"){var key4=key[4];if(typeof key4==="string"){var a={};for(var j in value){a[j]=this.copyTable(key4,value[j])}tab[key[2]]=a}else{tab[key[2]]=value}}else{throw new Error("type error map in proto "+name+" "+key[2]+" get "+t)}break}case 8:{if(t==="object"){tab[key[2]]=this.copyTable(key[3],value)}else{throw new Error("type error message in proto "+name+" "+key[2]+" get "+t)}break}default:{throw new Error("unknown type in proto "+name+" "+key[2]+" get "+key[0])}}}return tab}}});